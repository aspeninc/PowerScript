' ASPEN PowerScript Sample Program
'
' TIELINES.BAS
'
' Produce tie line report
'
' PowerScript functions called:
'   GetData()
'   FullBusName()
'   GetEquipment()
'
Type CellOut
  nArea1 As Long
  nArea2 As Long
  sBus1 As String
  sBus2 As String
  cktID As String
End Type

Const MX_LIST=1000	' MUST be large enough to store all ties
Dim ListOut(MX_LIST) As long  
Dim Counts As Long
Dim nArea As Long

' ===================== Dialog box spec (generated by Dialog Editor) ==========
'
'
Begin Dialog Dialog_1 49,60, 187, 73, "Tie line report"
  OptionGroup .GROUP_1
    OptionButton 16,8,25,12, "All"
    OptionButton 60,8,48,12, "From area:"
  GroupBox 8,0,168,24, "Scope"
  TextBox 116,8,24,12, .EditBox_2
  OptionGroup .GROUP_2
    OptionButton 16,36,37,12, "TTY"
    OptionButton 60,36,29,12, "File"
  GroupBox 8,28,168,24, "Output to"
  TextBox 92,36,81,12, .EditBox_1
  OKButton 44,56,52,12
  CancelButton 108,56,48,12
End Dialog
'
' ===================== End of Dialog box spec ================================

Sub main()
   nArea = 1
   ' Open output file
   rCode = OpenOutput() 
   If rCode = 0 Then Exit Sub
   LineID    = ""
   Bus1ID    = ""
   Bus2ID    = ""
   OutStr$   = "List of tie lines in the system"
   If rCode = 1 Then
     rCode = PrintTTY( " " )
     rCode = PrintTTY( OutStr$ )
     rCode = PrintTTY( " " )
   Else
     Print #1, " "
     Print #1, OutStr$
     Print #1, " "
   End If
   OutStr$ = "__Area1__Area2___Line____________________________________________"
   If rCode = 1 Then
     rCode = PrintTTY( OutStr$ )
     rCode = PrintTTY( "" )
   Else
     Print #1, OutStr$
     Print #1, ""
   End If

   ' Loop thru all lines
   Counts    = 0
   DevHandle = 0
   While GetEquipment( TC_LINE, DevHandle ) > 0
     ' Get Line ID and end bus names
     If GetData( DevHandle , LN_nBus1Hnd, Bus1Handle ) = 0 Then GoTo HasError
     If GetData( DevHandle , LN_nBus2Hnd, Bus2Handle ) = 0 Then GoTo HasError
     If GetData( Bus1Handle, BUS_nArea, Area1 ) = 0 Then GoTo HasError
     If GetData( Bus2Handle, BUS_nArea, Area2 ) = 0 Then GoTo HasError
     If Area1 <> Area2 And (nArea = -1 Or nArea = Area1 Or nArea = Area2) Then
       Call AddToList( DevHandle )
     End If
   Wend
   For idx = 0 To Counts - 1
     lineHnd = ListOut(idx)
     Call GetData( lineHnd, LN_nBus1Hnd, Bus1Handle& )
     Call GetData( lineHnd, LN_nBus2Hnd, Bus2Handle& )
     Call GetData( Bus1Handle, BUS_nArea, Area1& )
     Call GetData( Bus2Handle, BUS_nArea, Area2& )
     Call GetData( lineHnd, LN_sID, LineID$ )
     sBus1$ = FullBusName(Bus1Handle)
     sBus2$ = FullBusName(Bus2Handle)
     OutStr$ = _
           Format( Area1, "      ###" ) & _
           Format( Area2, "      ###" ) & "     " & _
           sBus1 & " - " & sBus2 & " " & LineID
     If rCode = 1 Then rOut = PrintTTY( OutStr$ ) Else Print #1, OutStr$
   Next
   
   
   If rCode = 1 Then
     Print Counts, " Tie-lines found. Output has been written to TTY window"
   Else
     Print Counts, " Tie-lines found. Output has been written to file"
   End If

   Exit Sub
HasError:
   Print "Error: ", ErrorString( )
End Sub

' ===================== OpenOutput() ==========================================
' Purpose:
'   Open file for output
Function OpenOutput() As Long
   Dim dlg As Dialog_1
   Dlg.EditBox_1 = "c:\temp\tielines.out"         ' Default name
   ' Dialog returns -1 for OK, 0 for Cancel, button # for PushButtons
   dlg.editbox_2 = nArea
   button = Dialog( Dlg )
   If button = 0 Then 
     OpenOutput = 0
     Exit Function
   End If
   If dlg.group_1 = 0 Then nArea = -1 Else nArea = dlg.EditBox_2
   If dlg.group_2 = 0 Then
     OpenOutput = 1
   Else
     fileName = Dlg.EditBox_1
     Open fileName For Output As #1
     OpenOutput = 2
   End If
End Function

' ===================== AddToList() ==========================================
' Purpose:
'   Prepare a sorted list for output
Sub AddToList( ByVal lineHnd& )
  Counts = Counts + 1
  ListOut(Counts-1) = lineHnd
  For idx1 = Counts-1 To 1 step -1
   lineHnd1& = ListOut(idx1)
   lineHnd2& = ListOut(idx1-1)
   Call GetData( lineHnd1, LN_nBus1Hnd, Bus1Handle& )
   Call GetData( lineHnd1, LN_nBus2Hnd, Bus2Handle& )
   Call GetData( Bus1Handle, BUS_nArea, Area11& )
   Call GetData( Bus2Handle, BUS_nArea, Area12& )
   Call GetData( lineHnd2, LN_nBus1Hnd, Bus1Handle& )
   Call GetData( lineHnd2, LN_nBus2Hnd, Bus2Handle& )
   Call GetData( Bus1Handle, BUS_nArea, Area21& )
   Call GetData( Bus2Handle, BUS_nArea, Area22& )
   nComp& = Area11 - Area21
   If nComp = 0 Then nComp = Area12 - Area22
   If nComp < 0 Then
    ListOut(idx1-1) = lineHnd1
    ListOut(idx1)   = lineHnd2
   Else
     exit Sub
   End If
  Next
End Sub